import org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlin_version = '1.3.72'
    ext.nav_version = '2.3.0-alpha03'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.28-alpha")
    }
}

Plugin.metaClass.isAndroidApp = { ->
    delegate.class.getCanonicalName() == "com.android.build.gradle.AppPlugin"
}
Plugin.metaClass.isAndroidLibrary = { ->
    delegate.class.getCanonicalName() == "com.android.build.gradle.LibraryPlugin"
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    plugins.whenPluginAdded {
        if (it.isAndroidApp() || it.isAndroidLibrary()) {
            android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
    }
    tasks.withType(AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "300"
        }
    }
    configurations.all {
        resolutionStrategy {
            force("org.objenesis:objenesis:2.6")
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
